Creational design patterns are concerned with the way of creating objects.

1.1
A Factory Pattern or Factory Method Pattern says that
just define an interface or abstract class for creating an object but
let the subclasses decide which class to instantiate.
In other words, subclasses are responsible to create the instance of the class.

1.2
Abstract Factory Pattern says that
just define an interface or abstract class for creating families of related (or dependent) objects but
without specifying their concrete sub-classes.
That means Abstract Factory lets a class returns a factory of classes.
So, this is the reason that Abstract Factory Pattern is one level higher than the Factory Pattern.

1.3
Singleton Pattern says that just"define a class that has only one instance and provides a global point of access to it".
In other words, a class must ensure that only single instance should be created and single object can be used by all other classes.

There are two forms of singleton design pattern
    Early Instantiation: creation of instance at load time.
    Lazy Instantiation: creation of instance when required.

1.4
Prototype Pattern says that
cloning of an existing object instead of creating new one and can also be customized as per the requirement.
This pattern should be followed, if the cost of creating a new object is expensive and resource intensive.

1.5
Builder Pattern says that "construct a complex object from simple objects using step-by-step approach"
It is mostly used when object can't be created in single step like in the de-serialization of a complex object.